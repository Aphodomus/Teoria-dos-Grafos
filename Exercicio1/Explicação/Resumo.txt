======= Divisão do trabalho =========
Bruna Lopes de Souza: Implementação dos grafos não direcionado ponderado e não direcionado não ponderado.

Daniel Vitor de Oliveira Santos: Implementação dos grafos direcionado ponderado e direcionado não ponderado.

======= Estrutura escolhida =======
• Lista de adjacências

======= Motivação ==================
• As matrizes de adjacências têm um tempo de pesquisa muito superior às listas de adjacências. Por exemplo,
para verificar se um vértice (5) tem uma adjacência com um vértice (9) basta verificar na matriz o índice [5, 9],
ou seja, complexidade O(1). Por outro lado, você precisa percorrer a lista de adjacências até a lista de vértices
de um vértice específico para verificar se existe uma adjacência entre eles, com complexidade O(n). Em resumo, quando
o assunto é pesquisa da matriz de adjacências é superior à lista de adjacências.

• Outra vantagem da matriz de adjacências é adicionar uma aresta entre dois vértices, pois basta alterar o valor na posição
[i, j], enquanto na lista você precisa percorrer a lista para verificar se o vértice não existe nela e depois adicionar no
final, tendo complexidade O(n).

• Mas, em relação à flexibilidade de adicionar novos vértices a lista de adjacências se sobressai sobre a matriz de adjacências,
pois enquanto na lista de adjacências você tiver um ponteiro para o último elemento da lista você gasta O(1) para adicionar
um vértice no grafo, na matriz de adjacências você precisa copiar toda a matriz de tamanho NxN para uma nova matriz de tamanho
N+1 x N+1, o que é muito custodo em termo de complexidade O(n^2). No que diz respeito a espaço a lista de adjacências também é
muito mais eficiente e menosa, pois em problemas do mundo real a maioria dos grafos são esparsos (possui poucas arestas
em relação ao número de vértices, ou muito menos arestas do que o número máximo de arestas possíveis), e como as matrizes tem
tamanho N, independentemente de termos apenas arestas ou o número máximo de arestas ela vai ocupar o mesmo espaço, ou
espaço ocupado seja. Já na lista de adjacências esse problema não acontece, ela cria e armazena apenas como relações
entre arestas que realmente existem no grafo.

• Conclusão, como listas de adjacências são mais diretas e dinâmicas para problemas de caso geral, sendo flexiveis e de fácil
compreensão e legibilidade do código.

======= Implementação ================
• Todos os grafos implementados são flexiveis em relação ao número de vértices e arestas, usando Lista Simples. Para Grafos
Ponderados foi utilizado uma Aresta, contendo um peso e um ponteiro para um vértice que ela vai apontar para a estrutura. Para Grafos
Não Ponderados foi utilizado uma lista de inteiros representando os vértices para os quais um vértice aponta.

======= Lógica da estrutura =========
• um Grafo vai possuir uma Lista de Vértices. Para cada Vértice desta Lista de Vértices vai conter uma Lista de Arestas, e
cada aresta vai conter um ponteiro para outro Vértice.

• Um gráfico de estrutura além de conter uma lista de vértices conterá um atributo para saber ou número de vértices e número
de arestas no Grafo.

• A estrutura Vertice além de conter uma Lista de Arestas vai conter uma etiqueta que representa o valor deste vértice e um grau
para saber o grau do vértice.

• A estrutura Aresta vai conter um peso e um ponteiro para um Vértice.